#Generates a scene with animated rings. Requires path.
import bpy

def scene(path, frames = 100, radius = [4,5], rotation = 1, 
aceleration = 1, res_x = 1920, res_y = 1080, render = True):
    camlocation = (12,-7,5)
    camrotation = (1,0,1)
    bpy.ops.object.camera_add(view_align=True, location=camlocation,
    rotation=camrotation)
    bpy.context.scene.camera = bpy.data.objects['Camera']

    
    bpy.ops.object.lamp_add(type='SUN', radius=1,location=(1, 5, 10))

    mat = bpy.data.materials.new(name="Material")
    mat.diffuse_color = (0.001, 0.3, 1)
    mat.diffuse_intensity = 1
    mat.specular_color = (0.5, 0, 1)
    mat.specular_hardness = 1
    mat.specular_intensity = 1
    mat.emit = 0.3
    mat.translucency = 1

    for x in radius:
        bpy.ops.mesh.primitive_torus_add(rotation=(0, 1.5708, 0), location=(0, 0, 0), 
        major_radius=x, minor_radius=0.25, abso_major_rad=0, abso_minor_rad=0)
        bpy.context.active_object.data.materials.append(mat)
        bpy.context.object.keyframe_insert("rotation_euler", frame=1)
        bpy.context.object.rotation_euler = (rotation, rotation, rotation/3)
        bpy.context.object.keyframe_insert("rotation_euler", frame=frames/2)
        bpy.context.object.rotation_euler = (0, 1.5708, 0)
        bpy.context.object.keyframe_insert("rotation_euler", frame=frames)
        rotation += aceleration


    bpy.context.scene.render.image_settings.file_format = 'AVI_JPEG'
    bpy.context.scene.frame_start = 1
    bpy.context.scene.frame_end = frames
    bpy.context.scene.render.resolution_x = res_x
    bpy.context.scene.render.resolution_y = res_y
    bpy.context.scene.render.filepath = path
    if render == True:
        bpy.ops.render.render(animation=True, write_still=True)
    
#Example
#scene("D:\\Blender code\\", radius = [6,5,4,3], render = False)
